#!/bin/bash
#
# net-snmp configuration script.
# Version: 1.2
# Author:  R. Walchuck (jwalchuc@enterasys.com)
#
# Changes:
# JRW  2/26/04  Added ETS specific sysobjectid and sysdescr
# MAB 9/29/06 Added sysoid for pcc.

###############################################################################
#  Initialize variables that are used throughout the script
###############################################################################
function initSnmpVars()
{
   COMMON_LIB=/usr/postinstall/commonfunctions
   
   if [ -x $COMMON_LIB ]; then
      source $COMMON_LIB
   fi

   #setup the version info for the SNMP description
   VERSION=`cat /etc/netsight-version` 
   DATE_STAMP=`date +%Y%m%d_%H%M`
   LOG_DIR=/var/log/install
   mkdir -p $LOG_DIR
   LOG_FILE=$LOG_DIR/netsight_snmpconfig_$DATE_STAMP.log
   log "Starting SNMP Configuration..."
   DEFAULT_RESPONSE=0
   SNMP_PROPERTIES=/usr/postinstall/snmpconfig.properties
   SYSCONTACT=""
   SYSLOCATION=""
   ROSTRING="public"
   RWSTRING="public"
   TRAPSTRING="public"
   RESPONSE=1

   loadSnmpProperties
}

###########################################################################
# Function to read in the snmpconfig.properties file
###########################################################################
function loadSnmpProperties()
{
   if [ -r $SNMP_PROPERTIES ]; then
      SNMP_USER=`cat $SNMP_PROPERTIES | grep SNMP_USER= | awk '{ split($1,strs,"="); print strs[2] }'`
      SNMP_AUTH=`cat $SNMP_PROPERTIES | grep SNMP_AUTH= | awk '{ split($1,strs,"="); print strs[2] }'`
      SNMP_PRIV=`cat $SNMP_PROPERTIES | grep SNMP_PRIV= | awk '{ split($1,strs,"="); print strs[2] }'`
      SNMP_AUTH_ALG=`cat $SNMP_PROPERTIES | grep SNMP_AUTH_ALG= | awk '{ split($1,strs,"="); print strs[2] }'`
      SNMP_PRIV_ALG=`cat $SNMP_PROPERTIES | grep SNMP_PRIV_ALG= | awk '{ split($1,strs,"="); print strs[2] }'`
   else
      SNMP_USER=""
      SNMP_AUTH=""
      SNMP_PRIV=""
      SNMP_AUTH_ALG=""
      SNMP_PRIV_ALG=""
   fi
}

###########################################################################
# Function to write out the snmpconfig.properties file
###########################################################################
function writeSnmpProperties()
{
cat << EOF > $SNMP_PROPERTIES
####################################################################
# File: /usr/postinstall/snmpconfig.properties
#
# Description: This file defines the default settings for the 
# snmpconfig script
####################################################################
SNMP_USER=$SNMP_USER
SNMP_AUTH=$SNMP_AUTH
SNMP_PRIV=$SNMP_PRIV
SNMP_AUTH_ALG=$SNMP_AUTH_ALG
SNMP_PRIV_ALG=$SNMP_PRIV_ALG
EOF
}

###########################################################################
# Function to write out the snmpd.conf file
###########################################################################
function writeSnmpdConf()
{

  SYSLOCATION_LINE="# syslocation"
  if [ "$SYSLOCATION" != "" ] ; then
      SYSLOCATION_LINE="syslocation $SYSLOCATION"
  fi

  SYSCONTACT_LINE="# syscontact"
  if [ "$SYSCONTACT" != "" ] ; then
      SYSCONTACT_LINE="syscontact  $SYSCONTACT"
  fi
  
  TRAPSINK_LINE="# trap2sink $TRAPADDR $TRAPSTRING"
  if [ "$TRAPSINK" != "" -a "$TRAPSTRING" != "" ] ; then
      TRAPSINK_LINE="trap2sink $TRAPADDR $TRAPSTRING"
  fi

  /usr/bin/net-snmp-config --create-snmpv3-user -a $SNMP_AUTH_ALG -A $SNMP_AUTH -x $SNMP_PRIV_ALG -X $SNMP_PRIV $SNMP_USER >> $LOG_FILE 2>&1
# Create /etc/snmp/snmpd.conf file
/bin/cat << EOF > /etc/snmp/snmpd.conf
###########################################################################
#
# snmpd.conf
#
###########################################################################
# SECTION: Access Control Setup
#
#   This section defines who is allowed to talk to your running
#   snmp agent.
#
# The following needs to be enabled to utilize OID trap monitoring. 
# Must be the same as rouser.

agentSecName netsight-wa

# allow IPv6 connections if they are supported
agentaddress udp6:161
agentaddress udp:161

# rwuser: a SNMPv3 read-write user
#   arguments:  user [noauth|auth|priv] [restriction_oid]
#
# This setting needs to be set if you are using snmp v3 but is not necessary
# for netsight.

rwuser $SNMP_USER
createUser $SNMP_USER $SNMP_AUTH_ALG $SNMP_AUTH $SNMP_PRIV_ALG $SNMP_PRIV

# rouser: a SNMPv3 read-only user
#   arguments:  user [noauth|auth|priv] [restriction_oid]
#
# The following needs to be on to enable OID trap monitors.
# Must be the same as authSecUser.

rouser netsight-wa

# rocommunity: a SNMPv1/SNMPv2c read-only access community name
#   arguments:  community [default|hostname|network/bits] [oid]
#
# Please change this to your Read Only(public) community and IP address(s)
# allowed to connect.

#rocommunity $ROSTRING 

# rwcommunity: a SNMPv1/SNMPv2c read-write access community name
#   arguments:  community [default|hostname|network/bits] [oid]
#
# Please change this to your Read Write(private) community and IP address(s) 
# allowed to connect.

#rwcommunity $RWSTRING 

###########################################################################
# SECTION: Monitor Various Aspects of the Running Host
#
#   The following check up on various aspects of a host.

# proc: Check for processes that should be running.
#     proc NAME [MAX=0] [MIN=0]
#   
#     NAME:  the name of the process to check for.  It must match
#            exactly (ie, http will not find httpd processes).
#     MAX:   the maximum number allowed to be running.  Defaults to 0.
#     MIN:   the minimum number to be running.  Defaults to 0.
#   
#   The results are reported in the prTable section of the UCD-SNMP-MIB tree
#   Special Case:  When the min and max numbers are both 0, it assumes
#   you want a max of infinity and a min of 1.
#---------------------------------------------------------------------------
#
# APP Specific Changes:
#
# The following proc listings should be uncommented based on what type
# of appliance you have installed.  The easiest way to determine
# which to use(at this point - it will be automated for final release)
# is to make sure netsight is started and issue a 'ps ax|grep -i netsight'
# and uncomment the processes listed in that output. If you install netsight
# into a directory other than /opt/netsight, you must change the following
# accordingly.
#--------------------------------------------------------------------------

# disk: Check for disk space usage of a partition.
#   The agent can check the amount of available disk space, and make
#   sure it is above a set limit.  
#   
#    disk PATH [MIN=100000]
#   
#    PATH:  mount path to the disk in question.
#    MIN:   Disks with space below this value will have the Mib's errorFlag set.
#           Can be a raw byte value or a percentage followed by the %
#           symbol.  Default value = 100000.
#   
#   The results are reported in the dskTable section of the UCD-SNMP-MIB tree
#

disk / 

# load: Check for unreasonable load average values.
#   Watch the load average levels on the machine.
#   
#    load [1MAX=12.0] [5MAX=12.0] [15MAX=12.0]
#   
#    1MAX:   If the 1 minute load average is above this limit at query
#            time, the errorFlag will be set.
#    5MAX:   Similar, but for 5 min average.
#    15MAX:  Similar, but for 15 min average.
#   
#   The results are reported in the laTable section of the UCD-SNMP-MIB tree

load  5 5 5

###########################################################################
# SECTION: System Information Setup
#
#   This section defines some of the information reported in
#   the "system" mib group in the mibII tree.

# syslocation: The [typically physical] location of the system.
#   Note that setting this value here means that when trying to
#   perform an snmp SET operation to the sysLocation.0 variable will make
#   the agent return the "notWritable" error code.  IE, including
#   this token in the snmpd.conf file will disable write access to
#   the variable.
#   arguments:  location_string
#

${SYSLOCATION_LINE}

# syscontact: The contact information for the administrator
#   Note that setting this value here means that when trying to
#   perform an snmp SET operation to the sysContact.0 variable will make
#   the agent return the "notWritable" error code.  IE, including
#   this token in the snmpd.conf file will disable write access to
#   the variable.
#   arguments:  contact_string
#

${SYSCONTACT_LINE}

# sysservices: The proper value for the sysServices object.
#   arguments:  sysservices_number

sysservices 12

# sysobjectid: Sets  the  system  description or object ID for the
#    agent.   Although  these  values  are   not   SNMP-
#    writable, it is conceivable that a network adminis-
#    trator may wish  to  configure  them  to  something
#    other than the default values.

# We need to modify the object id based upon which device they
# selected.
sysobjectid $SYSOBJID

sysdescr $SNMPDESC

###########################################################################
# SECTION: Trap Destinations
#
#   Here we define who the agent will send traps to.

# trapsink: A SNMPv1 trap receiver
#   arguments: host [community] [portnum]
# 
# Please change this to the IP address of your snmp trap server and community

#trapsink $TRAPADDR $TRAPSTRING 

# trap2sink: A SNMPv2c trap receiver
#   arguments: host [community] [portnum]
#
# Please change this to the IP address of your snmp trap server and community

${TRAPSINK_LINE}

# informsink: A SNMPv2c inform (acknowledged trap) receiver
#   arguments: host [community] [portnum]
#
# Please uncomment the informsink line if you want to use acknowledged traps.
# If uncommented, please change the IP address and community string to 
# those of your inform receiver and community.

#informsink 0.0.0.0 public 

# trapcommunity: Default trap sink community to use
#   arguments: community-string
#
# Please change trapcommunity to match the trap sink community on your network.
 
trapcommunity  $TRAPSTRING

# authtrapenable: Should we send traps when authentication failures occur
#   arguments: 1 | 2   (1 = yes, 2 = no)

authtrapenable  1

# Disable TCP Wrapper connect messages
dontLogTCPWrappersConnects 1

#-----------------------------------------------------------------------------
#
# Monitors For Traps
#
#-----------------------------------------------------------------------------

#defaultMonitors yes
#monitor -r 300 -o ifDescr "Interface Down" ifOperStatus != 1
#monitor -r 300 -o ifDescr "Interface Inbound Errors" ifInErrors != 0
#monitor -r 300 -o ifDescr "Interface Outbound Errors" ifOutErrors != 0
#monitor -r 300 "Available Real Memory Low" memAvailReal > 65535
#monitor -r 300 "Available Swap Memory Low" memAvailSwap > 65535
#monitor -r 300 "Available Disk Space Low" dskPercent > 20
#monitor -r 300 "Available Inodes Low" dskPercentNode > 10
#monitor -r 300 "High CPU Utilization" ssCpuIdle > 10
EOF
}

###########################################################################
# Function to set defaults using the .snmpinfo file if it exists
###########################################################################
checkSnmpInfo()
{
   SNMPINFO=/usr/postinstall/.snmpinfo
   # If there is a .snmpinfo file override the generic information.
  if [ -r $SNMPINFO ]; then
     SNMPDESC=`cat $SNMPINFO | grep SNMPDESC= | cut -d = -f 2`
     SYSOBJID=`cat $SNMPINFO | grep SYSOBJID= | cut -d = -f 2`
  else
     SNMPDESC="Extreme Networks NetSight Suite Appliance - Version $VERSION"
     SYSOBJID=.1.3.6.1.4.1.5624.2.1.116
  fi
}

###########################################################################
# Function to set defaults if other defaults are unavailable
###########################################################################
setDefaults()
{  
   if [ -z "$SNMP_USER" ]; then
      SNMP_USER="snmpuser"
   fi

   if [ -z "$SNMP_AUTH" ]; then
      SNMP_AUTH="snmpauthcred"
   fi

   if [ -z "$SNMP_PRIV" ]; then
      SNMP_PRIV="snmpprivcred"
   fi

   if [ -z "$SNMP_AUTH_ALG" ]; then
      SNMP_AUTH_ALG="MD5"
   fi

   if [ -z "$SNMP_PRIV_ALG" ]; then
      SNMP_PRIV_ALG="DES"
   fi
}

###########################################################################
# Function to run through all of the SNMP settings
###########################################################################
function fullConfiguration()
{
   clear
   showSnmpBanner
   enterUser
   enterAuthProtocol
   enterAuthentication
   enterPrivacyProtocol
   enterPrivacy
}

#################################################################
# Function to prompt the user for the SNMP user name
#################################################################
function enterUser()
{
    DEFAULT_SNMP_USER="snmpuser"
    SNMP_USER_PROMPT="(Required):"
    
    if [ ! "$SNMP_USER" = "" ]; then
       DEFAULT_SNMP_USER=$SNMP_USER
       SNMP_USER_PROMPT="[$DEFAULT_SNMP_USER]:"
    fi
    
    while [ 0 ]; do
       echo
       echo -n "Please enter the SNMP user name $SNMP_USER_PROMPT " 
       read SNMP_USER_TMP;
   
       if [ ! "$SNMP_USER_TMP" = "" ]; then
          SNMP_USER=$SNMP_USER_TMP
          break;
       else
          if [ ! "$SNMP_USER_PROMPT" = "(Required):" ]; then
             SNMP_USER=$DEFAULT_SNMP_USER
             break;
          else
             echo "The SNMP user name cannot be blank. Please try again."
          fi
       fi
    done
}

#################################################################
# Function to prompt the user for the SNMP auth protocol
#################################################################
function enterAuthProtocol()
{
   DEFAULT_SNMP_AUTH_PROTOCOL="MD5"
   SNMP_PROTOCOL_PROMPT="(Required):"

   if [ ! "$SNMP_AUTH_ALG" = "" ]; then
        DEFAULT_SNMP_AUTH_PROTOCOL=$SNMP_AUTH_ALG
        SNMP_PROTOCOL_PROMPT="[$DEFAULT_SNMP_AUTH_PROTOCOL]:"
   fi

   while [ 0 ]; do
     echo
     echo -n "Please enter the SNMP authentication protocol - MD5 or SHA $SNMP_PROTOCOL_PROMPT "
     read SNMP_AUTH_TMP;

     if [ ! "$SNMP_AUTH_TMP" = "" ]; then
        if [[ "$SNMP_AUTH_TMP" = "MD5" || "$SNMP_AUTH_TMP" = "SHA" ]]; then  
           SNMP_AUTH_ALG=$SNMP_AUTH_TMP
           break;
        else
           echo "Invalid entry. Please try again."
        fi
     else
        if [ ! "$SNMP_PROTOCOL_PROMPT" = "(Required):" ]; then
           SNMP_AUTH_ALG=$DEFAULT_SNMP_AUTH_PROTOCOL
           break;
        else
           echo "The SNMP authentication protocol cannot be blank. Please try again."
        fi
     fi
    done
}

#################################################################
# Function to prompt the user for the SNMP authentication string
#################################################################
function enterAuthentication()
{
    DEFAULT_SNMP_AUTH="snmpauthcred"
    SNMP_AUTH_PROMPT="(Required):"
    
    if [ ! "$SNMP_USER" = "" ]; then
       DEFAULT_SNMP_AUTH=$SNMP_AUTH
       SNMP_AUTH_PROMPT="[$DEFAULT_SNMP_AUTH]:"
    fi
    
    while [ 0 ]; do
       echo
       echo -n "Please enter the SNMP authentication credential $SNMP_AUTH_PROMPT " 
       read SNMP_AUTH_TMP;
   
       if [ ! "$SNMP_AUTH_TMP" = "" ]; then
          SNMP_AUTH=$SNMP_AUTH_TMP
          break;
       else
          if [ ! "$SNMP_AUTH_PROMPT" = "(Required):" ]; then
             SNMP_AUTH=$DEFAULT_SNMP_AUTH
             break;
          else
             echo "The SNMP authentication credential cannot be blank. Please try again."
          fi
       fi
    done
}

#################################################################
# Function to prompt the user for the SNMP privacy protocol
#################################################################
function enterPrivacyProtocol()
{
    DEFAULT_SNMP_PRIV_PROTOCOL="DES"
    SNMP_PRIV_PROMPT="(Required):"

    if [ ! "$SNMP_PRIV_ALG" = "" ]; then
       DEFAULT_SNMP_PRIV_PROTOCOL=$SNMP_PRIV_ALG
       SNMP_PRIV_PROMPT="[$DEFAULT_SNMP_PRIV_PROTOCOL]:"
    fi

    while [ 0 ]; do
       echo
       echo -n "Please enter the SNMP privacy protocol - DES or AES $SNMP_PRIV_PROMPT "
       read SNMP_AUTH_TMP;

       if [ ! "$SNMP_AUTH_TMP" = "" ]; then
          if [[ "$SNMP_AUTH_TMP" = "DES" || "$SNMP_AUTH_TMP" = "AES" ]]; then  
             SNMP_PRIV_ALG=$SNMP_AUTH_TMP
             break;
          else 
             echo "Invalid entry. Please try again."
          fi
       else
          if [ ! "$SNMP_PRIV_PROMPT" = "(Required):" ]; then
             SNMP_PRIV_ALG=$DEFAULT_SNMP_PRIV_PROTOCOL
             break;
          else
             echo "The SNMP authentication credential cannot be blank. Please try again."
          fi
       fi
    done
}

#################################################################
# Function to prompt the user for the SNMP privacy string
#################################################################
function enterPrivacy()
{
    DEFAULT_SNMP_PRIV="snmpprivcred"
    SNMP_PRIV_PROMPT="(Required):"
    
    if [ ! "$SNMP_PRIV" = "" ]; then
       DEFAULT_SNMP_PRIV=$SNMP_PRIV
       SNMP_PRIV_PROMPT="[$DEFAULT_SNMP_PRIV]:"
    fi
    
    while [ 0 ]; do
       echo
       echo -n "Please enter the SNMP privacy credential $SNMP_PRIV_PROMPT " 
       read SNMP_PRIV_TMP;
   
       if [ ! "$SNMP_PRIV_TMP" = "" ]; then
          SNMP_PRIV=$SNMP_PRIV_TMP
          break;
       else
          if [ ! "$SNMP_PRIV_PROMPT" = "(Required):" ]; then
             SNMP_PRIV=$DEFAULT_SNMP_PRIV
             break;
          else
             echo "The SNMP privacy credential cannot be blank. Please try again."
          fi
       fi
    done
}
###########################################################################
# Write the SNMP settings to the log file
###########################################################################
function logSnmpSettings()
{
   log "    1. SNMP User:                    $SNMP_USER"
   log "    2. SNMP Authentication Protocol: $SNMP_AUTH_ALG"
   log "    3. SNMP Authentication:          $SNMP_AUTH"
   log "    4. SNMP Privacy Protocol:        $SNMP_PRIV_ALG"
   log "    5. SNMP Privacy:                 $SNMP_PRIV"
}

###############################################################################
# Displays the choices available for running the script
###############################################################################
function showSnmpConfigMenu()
{
   clear
   echo "============================================================================="
   echo "SNMP Configuration"
   echo "============================================================================="
   echo "These are the current SNMP V3 settings.  To accept them and complete"
   echo "SNMP configuration, enter 0 or any key other than the selection choices." 
   echo "If you need to make a change, enter the appropriate number now or"
   echo "run the /usr/postinstall/snmpconfig script at a later time."
   echo
   echo "0. Accept the current settings"
   echo "1. SNMP User:                    $SNMP_USER"
   echo "2. SNMP Authentication Protocol: $SNMP_AUTH_ALG"
   echo "3. SNMP Authentication:          $SNMP_AUTH"
   echo "4. SNMP Privacy Protocol:        $SNMP_PRIV_ALG"
   echo "5. SNMP Privacy:                 $SNMP_PRIV"
   echo "6. Modify all settings"
   echo "============================================================================="
   echo
   echo -n "Enter selection [0]: "
}

###############################################################################
# Process the response from the SNMP selection menu
###############################################################################
function processSnmpMenuSelection()
{
   echo
   case $RESPONSE in
   1)
       #echo "$RESPONSE - Configuring the SNMP User"
       enterUser;;
   2)
       enterAuthProtocol;;
   3)
       #echo "$RESPONSE - Configuring the SNMP Authentication"
       enterAuthentication;;
   4)
       enterPrivacyProtocol;;
   5)
       #echo "$RESPONSE - Configuring the SNMP Privacy"
       enterPrivacy;;
   6)
       #echo "$RESPONSE - Configuring all settings"
       fullConfiguration;;
   *)
       #echo "$RESPONSE - Accept current settings"
       clear
       logSnmpSettings;;
   esac
}

###############################################################################
# Show an introductory message
###############################################################################
function showSnmpBanner()
{
   clear
   echo "============================================================================="
   echo "SNMP Configuration"
   echo "============================================================================="
   echo "The following information will be used to configure SNMP management of this"
   echo "device.  The SNMP information entered here must be used to contact this device"
   echo "with remote management applications such as NetSight Console." 
   echo "============================================================================="

}

###############################################################################
# Main script execution function
###############################################################################
function main()
{
   initSnmpVars
   checkSnmpInfo
   setDefaults

   # On ubuntu, use the existing startup script
   #writeNetSnmp

   fullConfiguration

   while [ $RESPONSE -gt 0 -a $RESPONSE -lt 7 ]; do
      showSnmpConfigMenu
      read -n 1 RESPONSE
      
      if [ "$RESPONSE" = "" ]; then
         RESPONSE=$DEFAULT_RESPONSE
      fi
      
      processSnmpMenuSelection
   done

   writeSnmpProperties

   if [ -f /etc/snmp/snmpd.conf ] ; then
      mv /etc/snmp/snmpd.conf /etc/snmp/snmpd.conf.old
   fi

   if [ ! -x /etc/snmp ] ; then
      mkdir /etc/snmp
   fi

   # stop snmpd
   log "Stopping snmpd to configure it"
   /etc/init.d/snmpd stop

   writeSnmpdConf

   service snmpd start
}

main
